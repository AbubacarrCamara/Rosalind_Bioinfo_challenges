from collections import defaultdict
def RNA_Protein():

    # Reads the codon table and splits the table into individual strings
    condon_table = open('RNA_Codon\RNA_Codon_Table.txt', 'r')
    content = condon_table.read()
    content = content.split()

    print(content)
    

    mrna_list = []
    amino_acid_list = []

    # Collects all mRNA strings from condon table 
    for mrna in content:
        if len(mrna) == 3:
            mrna_list.append(mrna)

    # Collects all amino acid strings from codon table string
    for amino_acid in content:
        if len(amino_acid) == 1:
            amino_acid_list.append(amino_acid)
        elif len(amino_acid) == 4:
            amino_acid_list.append(amino_acid)

    # Defultdict used as multiple keys all map to the same value(amino acid)      
    codon_dict = defaultdict(list)
    for mrna, aa in zip(mrna_list, amino_acid_list):
        codon_dict[mrna].append(aa)

    print('condon_dict:', dict(codon_dict))

    sequence = 'AUGGGGGUGUCGUGGCCAAUGCAUCCUCAACGAAAAAAAUCUUUGUCAUUAUUCGAGCCUGAUUUACUGAACUUUGUUAGACUCAUUAUGCCUUAUAACGGCGCUAGGACAGGUUCCUGCAGUGGGUUCUUGGCUGGAGAAAUCUGCUCAUUGUCAGAAAUCGGCAUCUGCUCGGGUGUCGUAAUCGCACUUAUACUAUCCCCACGCCUGCGCUGUGGUAGGAUUAUUGAAGACGGUCCUCACGGAUAUCGCCACAAUAUUUUUUGGCCUAGAACACUCGCGUUUAAUCUUGUUAACGCUCCAAGUGACCUCGGGUCCUGUCUGACUACUCACGACUUCAUGCGGCGAACCCUUUAUGAUCACUUCUGCAAAGGUCUUCCGAUACGCCGUAAGCGCGCCGAGAAUAUUACUAGAGGGUGCCCCCAACGACAAACAGGCCUGGAUACGAUGAACGCAGUGGCUCUAGAACUUGAGCGGCCGGCGGACCUUCUCCUACAUAUUCUGACUCCACACACGUCAACCGUGCCUUGCACCGGAGCACCGCAGGGAUGUGUAGGUGUAAGGCCUCUGAAUACAUUGUCGUUUUGCGCUAAAAUUCUUGCAGUGGUGGCCAUCUCGGUGAUUACGUGCUCUCGUCCUAAAGACAUUACCAUCAGUCCAGCUCUGGUUGACACUGACGGGGACCUAUAUGUUCCCUGUGUCCUUAAAGCUACGGUUAGUAGUGACGCCAGCUUCAAUUGCCCGCGAAAGGUACAAGGUGAGAGUACUCCAUCAGCUACGUUCGAAUCUGGGAUUUGGGCUAGCGACUACUCAUCCCAAGCGGUUGGUCAGCUUGGGAGAUUAUCUUGUAGCAAACCAGUAUCGUGGUCAGAUGUCUCGAGCGAAACCCAUAAAGACACAUCUUCGGUUUGGACUCACCAAGAUCGAUAUAACGACUCAUCUUGGGCACAGCGACACGGCCGCCCAAAUAUGCCGAAACCUGUGUAUCGUCAGCAAGCUCAUGGGGCGUCAAUUUGCUAUGUGCCACCUGAUCCGAUCUACCAAACACUCACUGCCACUCCCCUAUUACUGCUGAUGACUGCCAUUUGCGCGGCAUUGAAUAUGGACCUCCGGAAAUACAGCACACAGCAUGCAGUUAAAUUCUUUGGUCGGGAUGCACGAUUCAAAAAGGUUGACCUAGAAGGUCCGUUUGUCUUGAAUCACCUCCACUCGUCGCUUCUGUCAUACUUAUUUGGACUCGCUCCAAGCGCUCAACGUCCCGUAAGCGUAGAUCGUGAUAUUGAGGAUAAUGCAGUAACUCUCCCAACUCCCUAUAAACUCCACAGGCUGAGUUGUCGACUUACGACAGUUUGCGAUGUUAUCUUCAGCUCUCUGAGCGCACGGUAUUUAUGUGAGUCCGCCGGACGUGCAGCCGCCCACGGGGAAAUAUUCCAUACUCUAUCGUACGACCCGUCCUCGAUAGGAGCCAAGGCGGAUAGACAGGUGUGGCGUACGGUCAUGGCGGCCCUCAAACCUGGACCAAAAGAAAGAAACGCUGCCGCUGAAUGCCAAGGUAAGACCGUUAGGGAGCCAUCGUAUGAAAUCAAAUGCCUCCGUGCUUCCGCACCUUGUCCCAUAACUCACCAGCAUAGCAUGCUGUCACAUAAUGAAUCGUGUACCAGCACGGAACUUUCAGACAUACAAGUAAGCGGGUUCCUGUCAUAUAGGCUAGGAAGAAAACUACGUUAUUCGAUCCGGUAUCGUCACUUUUACCUAUCAGGGGGAUUGACCCGAAAAUACACAUACGGGGCUUUAGUGUAUUUGUUCAACAUAGCCACCCCAAGCUACAAAUUGCCCAUUACCGACGAACAAUGCACCCGAUACUAUACGUCGGUAGGAAUACACAUAACAGUGACACUUCGUAGCCGAACGCCAUUGAAGGAUGCAUGGGCUAUGGACUUCUCGAGAACCUUUCGCUCACGGGCAAGAUCUACUGUGCGCGUCAAGUCGGGGCCGUGGAUCCAUGAGGCAAGCCAAAGAUUGUUGAAUUCCUCCGAAUGGUCAAGUUGUAUCCACGCUACAAGGGAAGCGGCAACUCCUGGGUUGCUUUCUCAGUUAAGGCGCCUAAUUUUAGCUCGAACAAGAGUAUUGUAUGACACGUCAAGGCGCGCCACAGUGAGAGUACCACCAAGGCCCGUUGAUAUACGACGUUUCAGCGUAACGUUUCACGCCAGACGAAUGCUCUCACCAUAUGACUUUAAUUAUUUACUUGCUGCUGGUCAGCCAAGUCUGCGAGUCUCUUCCGCGGUUCAAGCUUCAUGGACCCAUACACAAUGUCUUCUACCACUUGUUAGACCGGGGCGAGCUUUCGUAAUCGGUCGGGUCCCGGGAGGGCCCCAAACACCACGAGGACGCGGAUACAACACGCAUCGAACUGGUAUGAAACACAGGGCUCCCCAGGGACCCGAUAUUGAAUGCCCUGCAUUUCAGAUCCUGUGGGUAUCUGUUCUUUGCUUCUGGUUGGCGAAGUGUGUUGAACCGGUACGUCGUCUAGAUGUAUCUCGGUUACUCUCUAGUCUACUCCGACUGAUAUCGAUCAUUACCGCUGAAGCUGAAUGGGCACUGAUGUCGCGGCCGUUGAGAAGAUGUCGUAGACUCAGUGACUGCACGACCUCCAGAACGCUGGUUCUCUGGUUGAUCCUGCGCUGCUUCUCGCCGGGCCUCUAUUUGGAAGCUUACGCAAGCAGGCAUACUUGUUCCUCCCUAGCAAUUACUCUGGCGGUGUCGACAACCCAGGGUAUCGGGCUGUUGGCCGCUAAAGUCACCGCCGCCUUGGAUUUCUCGCUACGUUGUGGAAAGAGUCAGCUGAUUUCCCACAUGACAUUCAAUAUAGUCCAGCGGCACCGAGACAACAGUUGGGGGGCCCUGGUGGCGCCUAUCAUAACAGGAUCGCAUGUAAUAAUGCCGGCUAUUCCUGGAGUGCCGCAAGAUGAGGGAAAUGCUGACUUUUACGAAUUAUCGGUAACCCCACGCUGGCCUAGACUGGUGGUCCUUGCCAGCUUCGUGAUACGCGUAGUAAAAGUUACCCGGAGAGGGGCUAAAUCUUAUGACGGUAUAGCAGGAGAUAUGUUUGAGUUAUGUACCUUCGAUUUGCUCCGUCCUCCAAAGACCCCCUUGGAGUGUUAUAAAACUUCGUAUGUAUCACUUGGAGCGACGCAUGAAUGGGAUUUCUACGGAUGUGUAGCAAGUCUAAACUCGCUCGCUACAAAUGGGAAAUUCUGCAGGUCGGGAUAUUCGGGGCUGGCUACGACUCUGCAAAUGGAACUACACUUGUUAAUUAGGCUCGCUCGUAUAAACACUAGAAUCAGUCCCUUAGGCCCACCUCGUCAAAGCUCGUCUCGAUAUAAAAUAUCGUCUGAAACGAGAGAUCUAGCGAAAGAACGUUGCGCAGAAGAAUUGGGAUUAAGAGAAGCAGACAUUCCUCUAGAUGUCAUCCCUCACCGCUCCCACUUAAAUUAUAGUACUUGUAGAGACGCAAGUGUUGUUAUCAUUUCUAUGUUAUUGGUCGGUAGCAAAGUCGGCCGAUCUGCACUCACCUUCCGACCUAUCACGAUCAUUCGCCACCAAACUCGAUCAGCGGACUUGCCUUACAACGAUUUCGCUUUGGACAAUCUGGUGUGUAAAUACCUUCAGGUCCCAUUCAGUGAUCGUACGUUUCACCUGGAGGCUUUGACUCGCCCUUCUACCCGUGCCGCGCAAUACAUACCCGCGAAAAAUUCCUACAUACCGGAUGUAUAUUUAAGAGUUAAAGGACCGUCGAGAAUUUGUAAUCGCUUGAGGUCGCGGCCUCCACUUGGGUCACAUAGUUCAAGGCCAGGGACUGAUGGGCUGGAAGGACGCUUGAGACAGCAGCGUGCGGGUCUCAGUUGCAUACACGCAAGAUCACACAGUCGGGGUGCCCUCGGCGAACUUACCAUUCAUGACAGCCCCUUGGGCACCAGUGAGUUUGUUCGCACUAUGGCGUCGAAUCCAUGUAUUAUAUAUAACGGGCUCGCGCCAGUAUUUGGGCAUGGUGUCCAUGGGGUUCCCCCUAGUUCCCUUAACGGGGUCUCUUGCUGCCCUCAUCACAGGAACCGUGAUUCGACUUCAGGAUACGCGCGCAAUCGGAUUCGCUACAACUCCCGCUUCGUCACUUCGACCUUGACAGUGAUUAGAGAGGGUUGGGACGUCCGAGGAUCCUACUUUGCAAACGUCGGUACUGCCGCGAGAGGGGAUCAGAAAUCAACUUGUCGACGUUCUGAGAUCAUACGGUUGCCGCUACCGUUUAUUUUUAGUUGCUUCUACCAAUUUGUUUGCAAGCGAGCUGGUACACAAUCUUGUAAGGGCUACGUGCGACGACCAGCUUACACAAGCAGCAUUAGCGAACCAUCCUACAGUCACCCCAGACGGCAUCUCCGCAGAAGUGGUGCUAACGAAAGGACACAUCCAUCAAUAUUAUUCAUCAGAUUCCGACCUAGAGAUUCAAGGGUACCCGAACUGGAUGUUGGGAAUGUCUUACGGUUGGCGUCGUGGGACCCCACCAUGUAUGAGCAAUUCCACUGGAACUGCUUUGCUAUACUGACAAAGAUUUGGGCGCAUGUCCGUCGAUCGAGGAUAAGACAACACUCUAAGAGAUCCCCGAAUCUGGUGACACCCUACCCACUGAAAAUUAACAUUUUAUUCAAUGCAGCGCGCGUGCAACAGAGGGUCCCCCAUUACGGGUGUACCAAACGGGGUCGGGCCACAAUUGUCUUGGGUGUUUGCACCAACUCUCUCUUUAUGCAACUUCUGGCCUUCACGUUCUCUGUUGUAAGGUCGGGAAGUCGCUCAAGUACGAUAACCGAACUCCCAGGAUGGACUGCACGGGCGAAGGCUAAAGCGUUCAUCUGUCAAUUCCCAACCAAUGCACGAUCUGGCUCUCAGUGUAUUCGGAUUAAUACUGGCGUGGGUCAUCCCUUCACUUCUGGAUGCCGACUCCUCGGGCCACCUCGGGGCUACAUGGUCCGAAAUAGGAGUAGUGAAUCAACCCGAGGGAGUGCGAGAAAGCACGGACCUGUAAGACCCAUCAGACGGGGACCGUGUUCUCAUGGCGCUUCCUACACAGCUCGAAAAAAACCUCAAAAUCUGCCACUCGUUAUGAGGUGCUCGCGGGGGGUACAAACUCAUCGUAGUAGAGCUUAUCAACCGAGUUUCCUCGGCAUGUCAUUGCGAUCAUCAGGAACAUGGAUACUCGUAAGUCAAGGGUCCCAGCGGCAGCCUGUAUGUAAUUUAGAAGAACAGGACUCCUUAUACCUGUAUUCCCCACCGUCUUUGAGACUUAGAAUCGUACUAGACCCGCUAAAGCAUAUAGUCCAUUGGUCUUCGUUCUUUUCUCUCACUAUCAACCACGGCUUCUGGUGGCGGUUGAUUGGAACACUACCAUUUGCUGUAAGUCAGAGGGUGAUCGAUCGCAGUCUUCGUUACAUUGCGUACCAACCGUUGGGAUCUCCUCUGACACAAUCGGGCGCGCGACUAGCAUCAAAGUAUUUAGGCAGUCCUGGUGCUCGCAUUUGCGACGGGCUCAAAACUCGUAAAUUGGUCAUUAACAACAUCUGGUGGCCUGCGGCUAAUCCAAUUCAAGAGGACACCUCCGGUCUUAAUAACAACAUAAUCUCGCAGACGGCACAUACGUCCACGUGCCGUCAUACGCAUAUUUUCAAUCGGUUCGUAAUAUGUUGCGGAUUUGAAAUUGGAGGAACCCCCUUGGUAGAAAGGUUACAUGUUUUAUCGAGUGUUACGCUCAGAUCGGCCCGCUCACUUUGCCGUAACAUCCACAGUUUCUACCAAGUAAAUCUUACUGCGAUGAUCCUUUUGCUUCAGAGCGCAGAUGAGGAAGGUAUAGUGGUCUCGUGCUUACCGCGCGCAGGCAGGGUCUUGACAUACUGGCGGGCAGGAGAGUCAAAUGCUAGAGCUAACAGUUCCCAGCUAAAAUGUCCAUGUGCUUUCAGAGAUACACACAGCGAUAGGCUAGAUCGUGGAUGUGGGUCUUUCGCGGGUGUCCCUCUCAUUAACCGAUACUCAACGCAGAUCAUACCGAACGCGUCCGUGAUUGUGAAAGUCGUAUCGCACCGCCCAGCGCAGGGGACUUGUUGUCAGUACGUUCGUAGGACAAAUCUUUACUCACUGCAGUCGAUACUUAACAUCGCAUGGGAUUUACAGCCUCUAAACAGUCCCACGUGGAACUAUCUAUCUCCCAGAGUGCUCUCAUCGCGUUUACCCCUAUCAAGGGUGGCCUGCGAAUAUGGUGCUAAGGUGAGAACAAGUUACCGUGGGCGAGGUAUUCUGACGUUCGAAUUAGAUGGUAUCAGCCGUAUACGUCACGCAACCGCAAGUACUCACAAGCUGGCCUCCCAUAGCGACCAUAUGUGGUCCCCAUGCGUUAUCGCUGAAUCCCUCGUGCGUGGUGCCACUGCUUCUGUUCUGUUAACGCUCGCGUGGGCGUUUUACGUAUCACUGUUGUCCCUAUGGGUCAGACAUGCGCUAACGCAUCGGGAAGUUGUUAGGUGUAAAUGCGGUCUGGUCUGUCUAAGGCGAGUCGAUAUUUUCGCCGCCGCGUCUUUAUGUCCUCCGCAUUUCAUUCCGGUGCGUGCUACUACCGGAGUUGCCUUAACUCACAACACUGAGGAGAUCUAUGCCAGCCUUCCUGACACAACAUCAGAUAAAGUCUUUAGUUACCAAGUAUUACGUACGAUUUCUUUGUCUAUAUGCACUUGGACUUUUAGUUUGACGAUCUGUCAGCAUGGGAUAAUGAACAGCUCGCGAUCGGGGUUCAAAGCGGGCAGAAUCUUCACCUAUUCAGACAGCGCAACCCUGUUAGGUCUCUACCAGCCUCUUGGAUCGUUACAGUGCUCCAUGGACCAUGUCCGUCGCAGGCGUGUUUUGUGUAUCCAACUACAUCUGGUUCCGUUACAAGACUAUCCGCUGUCCGGGUUUUUUAAUCCACAAGCGCCAUCAGGAAACCUCUCGCGACCUAUGCGGGACAGUCACCUGGCCGGUGGUAAGAAAUGUUCGCGAUGUCUUCUACCCGUGGUGCGUCGAUCUGAGAGAGGCAGUAAGGGUAACACUUUAUAUAUAUCCUCAAUUUCAAGUCACUCCCAAUACGGCAUUUUUUAUCGAAGACCUUUCGACAUUAGGCGGAACGGUAGACCACUUGCAGAACGCCUAGGUCGUUGCAGACGUCGGCUCGUAUCCGGCGGCAACAGAGCGCAACUUUCAAUAGAAGCCCCAACUGUCUGUCACAAUUUACGCUUCAGGCAUAAGCUCAGGGUUGCCGCGCGCAGUCAAGAAGGCGAUUUUGUUCUAGCGUCGAACCCCCAUCCAGAAUCGUCGUCCAUCACGCGUAUAGGCGGACGCACGUCAAUUUAUACUCGUAAAACUUCGUGUGGAGUCGUAGUAGCACAGGUGUUCUGUCAGGUUCCAGGAAAAAGGUAUUUCUCUGGGUGCACCAACCCCUGUGCCCUAUCUUAUGUGCGGGAAAAUGUAACUUACUUAAAACACCUUGGGAUGGCGCAUGAGCUUGACACACUGUCAUUGUGUACCGCCAGGCAGUGCUUCGUGAAGUUACCUGCAUCCAACCCUCAUCAUGACACGACCCUUAAUUACAUGACAGAUCAGGUCACUAGACGAGUUCCUGCAGUUUUUAAGCGACACGCGAGGAAGCGACAAGACAUCAGGAGAGCAUCGGAGAGGUCGCCUUCUGCAACUUGGGGUACUAGGGCAGAUCAGGCUAGGGGCAAAUCUAUGUUCCAUUCUCUGCGACUAGGUCAUAGAACCGUUGGAGAACUCAGAUCAUUAAGGUCCCUAAGGUGGCCCCCAUCUUCACUUGAUAUUGAUCGCCUUGCGGACCUCGCAGACACUCGCAUCUACUUUCAGCGUGCCAGAAUUGCAACUUGUGCCGGACACGGUCGUCAGCGUUAUAAGUCGCUCCAUAUCCGUAUCACAUGUUGGAACGUAUUUGAAACUUUUUAUCCCCCUGUAUAUGUAAAGCGAACUAGUCGCCUCAGGGGAGAUCUCGGUAAUAACACAAUAAAGCUCGAGUUUCAUAGGAUGUCUGCCAAAUCUCGGCCCCAGAGAGUCAGUCAUCCUUCUUAUACGAUAUACGUUCGACCACUGAUGGGCGCCACUGGAAAACAGAAACAAGAAAUCCGCGGUUACGUUGGACGGAACAGUUCGGGGCAUCGAAUAUCCUCGCAGCGGCAGAGGGAGGUCCGAUUAACCACGGCUCGACUGGAGCGUCUCGGGUCGCUAGUACGGGAAAGGACACUUUCACGGACGAUAACAGCAAUUUCCCCGGGUUGUAGUAGUUCUUGUUGCGACGAAUCGUGUACAAAAAUCUCUGAUCAAUCCAAACGUUGCGUGCGCAUACGUUCACGGGGCCUAUGUUGUACGUGUGCGUUUGCCUAUGUACUGCUAAUAUGCUGUCAGGCCGUUUGGUCCGUCAACCUUGCCCCGCGCACACAACAACCGCCCUCUGGGAUCUGCUCUCUUAAAUGUAAGUCUCAUUCGACCGGGACAUAUCCGAAAACUCAAAGGUGGGGGCGCAUUGGCAACAAACUGCUAGAAGGAGUUCCGCGCGUUGUGAAACAGUCAAUCUUCGUGUCUAUACGCCCGAGUCGCCGUGGCCGGCUGACAUCCCACACGCGGGGGGUGGACAGAUCUCGUACGCGAGCGGGGCCGUUACUCCGAUUUUCAUGUAACUCACUGGUUUGGGGCCGCCCGACGGCACAUAUGCGGACUAAACAACUGCUUGACACAAAUACGUACCUCCGCAGUCUAGGAAUUUUCACAUUAAUAUUCCAACUUUGCAAGUCAGACAGCUGCACGUUGCUUCGUAAGUGGCUCGGAGGCUCUCACGCGUACAGGCAAAAACUCACGGAAUAA'

    protein_list = ''

    for i in range(len(sequence)):
        codon = sequence[i:i+3]
        # AUG = start
        if codon == 'AUG':
            # iterates the the length of sequence moving in three
            for j in range(i, len(sequence), 3):
                current_codon = sequence[j:j+3]
                # if current mrna sequence matches a key in codon_dict then protien_list adds the corresponding value 
                if current_codon in codon_dict:
                    protein_list += ''.join(codon_dict[current_codon])

    # Splits the list at the STOP codon and selects the first index of the split string 
    protein_list = protein_list.split('Stop')[0]

    print('Protein_list:', protein_list)






RNA_Protein()
